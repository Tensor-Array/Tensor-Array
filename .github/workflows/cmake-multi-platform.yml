# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on multi platform

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-22.04", "ubuntu-22.04-arm", "windows-latest" ]
        cuda-version: [ "12.9.1", "12.4.1" ]
        exclude:
        - os: "windows-latest"
          cuda-version: "12.9.1" # CUDA 12.9.1 is not available for ARM64

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Run CUDA bash shell Ubuntu/Debian
      if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os, 'debian')
      env:
        temp: ${{ runner.temp }}
        cuda: ${{ matrix.cuda-version }}
      run: |
        chmod +x ${{github.workspace}}/scripts/actions/install-cuda-ubuntu.sh
        ${{github.workspace}}/scripts/actions/install-cuda-ubuntu.sh
      shell: bash

    - name: Run CUDA bash shell RHEL
      if: startsWith(matrix.os, 'rhel')
      env:
        temp: ${{ runner.temp }}
        cuda: ${{ matrix.cuda-version }}
      run: |
        chmod +x ${{github.workspace}}/scripts/actions/install-cuda-rhel.sh
        ${{github.workspace}}/scripts/actions/install-cuda-rhel.sh
      shell: bash

    - name: Run CUDA bash shell Windows
      if: runner.os == 'Windows'
      env:
        temp: ${{ runner.temp }}
        cuda: ${{ matrix.cuda-version }}
      run: scripts/actions/install-cuda-windows.ps1
      shell: pwsh

    - name: Configure CMake
      if: runner.os != 'Windows'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Configure CMake Windows
      if: runner.os == 'Windows'
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_CONFIGURATION_TYPES="Debug;Release" -G "Visual Studio 17 2022" -A x64

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
