cmake_minimum_required(VERSION 3.18)

file(GLOB TensorArray_inc "*.hh")

install(
    FILES ${TensorArray_inc}
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/tensor-array/core
    COMPONENT headers)

enable_language(CUDA)

find_package(CUDAToolkit)

if (CUDAToolkit_FOUND)
set(CMAKE_CUDA_ARCHITECTURES 52 75 89)
set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)
list(APPEND CMAKE_CUDA_FLAGS "--default-stream per-thread")
endif()

if (CUDAToolkit_FOUND)
file(GLOB TensorArray_src "*.cc" "*.cu")
else()
file(GLOB TensorArray_src "*.cc")
endif()

# file(MAKE_DIRECTORY "include/tensor_array/core")

add_library(tensorarray_core SHARED ${TensorArray_src})

set_property(TARGET tensorarray_core PROPERTY C_STANDARD 11)
set_property(TARGET tensorarray_core PROPERTY C_STANDARD_REQUIRED ON)
set_property(TARGET tensorarray_core PROPERTY C_EXTENSIONS OFF)

set_property(TARGET tensorarray_core PROPERTY CXX_STANDARD 17)
set_property(TARGET tensorarray_core PROPERTY C_STANDARD_REQUIRED ON)
set_property(TARGET tensorarray_core PROPERTY C_EXTENSIONS OFF)

if (CUDAToolkit_FOUND)
set_property(TARGET tensorarray_core PROPERTY CUDA_STANDARD 17)
set_property(TARGET tensorarray_core PROPERTY CUDA_STANDARD_REQUIRED ON)
set_property(TARGET tensorarray_core PROPERTY CUDA_EXTENSIONS OFF)
endif()

if (CUDAToolkit_FOUND)
target_link_libraries(tensorarray_core PRIVATE CUDA::cudart CUDA::cudart_static CUDA::cublas)
endif()

install(
    TARGETS tensorarray_core
    EXPORT TensorArrayTargets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}/tensor-array
    COMPONENT libraries
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}/tensor-array
    COMPONENT libraries)

add_library(TensorArray::Core ALIAS tensorarray_core)
